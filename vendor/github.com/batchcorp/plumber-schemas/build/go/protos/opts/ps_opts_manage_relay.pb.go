// Code generated by protoc-gen-go. DO NOT EDIT.
// source: opts/ps_opts_manage_relay.proto

package opts

import (
	fmt "fmt"
	args "github.com/batchcorp/plumber-schemas/build/go/protos/args"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetRelayOptions struct {
	// @gotags: kong:"help='ID of the relay to get (leave empty to get all)'"
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" kong:"help='ID of the relay to get (leave empty to get all)'"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRelayOptions) Reset()         { *m = GetRelayOptions{} }
func (m *GetRelayOptions) String() string { return proto.CompactTextString(m) }
func (*GetRelayOptions) ProtoMessage()    {}
func (*GetRelayOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_86dbec1f9d2837a2, []int{0}
}

func (m *GetRelayOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRelayOptions.Unmarshal(m, b)
}
func (m *GetRelayOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRelayOptions.Marshal(b, m, deterministic)
}
func (m *GetRelayOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRelayOptions.Merge(m, src)
}
func (m *GetRelayOptions) XXX_Size() int {
	return xxx_messageInfo_GetRelayOptions.Size(m)
}
func (m *GetRelayOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRelayOptions.DiscardUnknown(m)
}

var xxx_messageInfo_GetRelayOptions proto.InternalMessageInfo

func (m *GetRelayOptions) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type CreateRelayOptions struct {
	// @gotags: kong:"help='ID of the connection to use',required"
	ConnectionId string `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty" kong:"help='ID of the connection to use',required"`
	// @gotags: kong:"help='Secret collection token',required"
	CollectionToken string `protobuf:"bytes,2,opt,name=collection_token,json=collectionToken,proto3" json:"collection_token,omitempty" kong:"help='Secret collection token',required"`
	// @gotags: kong:"help='How many messages to send in a single batch',default=1000"
	BatchSize int32 `protobuf:"varint,3,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty" kong:"help='How many messages to send in a single batch',default=1000"`
	// @gotags: kong:"help='How many times plumber will try re-sending a batch',default=3"
	BatchMaxRetry int32 `protobuf:"varint,4,opt,name=batch_max_retry,json=batchMaxRetry,proto3" json:"batch_max_retry,omitempty" kong:"help='How many times plumber will try re-sending a batch',default=3"`
	// @gotags: kong:"help='How many workers to launch per relay',default=10"
	NumWorkers int32 `protobuf:"varint,5,opt,name=num_workers,json=numWorkers,proto3" json:"num_workers,omitempty" kong:"help='How many workers to launch per relay',default=10"`
	// @gotags: kong:"cmd,help='Apache Kafka'"
	Kafka *args.KafkaRelayArgs `protobuf:"bytes,100,opt,name=kafka,proto3" json:"kafka,omitempty" kong:"cmd,help='Apache Kafka'"`
	// @gotags: kong:"cmd,help='AWS Simple Queue System'"
	AwsSqs *args.AWSSQSRelayArgs `protobuf:"bytes,101,opt,name=aws_sqs,json=awsSqs,proto3" json:"aws_sqs,omitempty" kong:"cmd,help='AWS Simple Queue System'"`
	// @gotags: kong:"cmd,help='MongoDB (CDC)'"
	Mongo *args.MongoReadArgs `protobuf:"bytes,102,opt,name=mongo,proto3" json:"mongo,omitempty" kong:"cmd,help='MongoDB (CDC)'"`
	// @gotags: kong:"cmd,help='NSQ'"
	Nsq *args.NSQReadArgs `protobuf:"bytes,103,opt,name=nsq,proto3" json:"nsq,omitempty" kong:"cmd,help='NSQ'"`
	// @gotags: kong:"cmd,help='MQTT'"
	Rabbit *args.RabbitReadArgs `protobuf:"bytes,104,opt,name=rabbit,proto3" json:"rabbit,omitempty" kong:"cmd,help='MQTT'"`
	// @gotags: kong:"cmd,help='MQTT'"
	Mqtt *args.MQTTReadArgs `protobuf:"bytes,105,opt,name=mqtt,proto3" json:"mqtt,omitempty" kong:"cmd,help='MQTT'"`
	// @gotags: kong:"cmd,help='Azure Service Bus'"
	AzureServiceBus *args.AzureServiceBusReadArgs `protobuf:"bytes,106,opt,name=azure_service_bus,json=azureServiceBus,proto3" json:"azure_service_bus,omitempty" kong:"cmd,help='Azure Service Bus'"`
	// @gotags: kong:"cmd,help='Google Cloud Platform Pub/Sub'"
	GcpPubsub *args.GCPPubSubReadArgs `protobuf:"bytes,107,opt,name=gcp_pubsub,json=gcpPubsub,proto3" json:"gcp_pubsub,omitempty" kong:"cmd,help='Google Cloud Platform Pub/Sub'"`
	// @gotags: kong:"cmd,help='KubeMQ Queue'"
	KubemqQueue *args.KubeMQQueueReadArgs `protobuf:"bytes,108,opt,name=kubemq_queue,json=kubemqQueue,proto3" json:"kubemq_queue,omitempty" kong:"cmd,help='KubeMQ Queue'"`
	// @gotags: kong:"cmd,help='Redis PubSub'"
	RedisPubsub *args.RedisPubSubReadArgs `protobuf:"bytes,109,opt,name=redis_pubsub,json=redisPubsub,proto3" json:"redis_pubsub,omitempty" kong:"cmd,help='Redis PubSub'"`
	// @gotags: kong:"cmd,help='Redis Streams'"
	RedisStreams *args.RedisStreamsReadArgs `protobuf:"bytes,111,opt,name=redis_streams,json=redisStreams,proto3" json:"redis_streams,omitempty" kong:"cmd,help='Redis Streams'"`
	// @gotags: kong:"cmd,help='PostgreSQL (CDC)'"
	Postgres *args.PostgresReadArgs `protobuf:"bytes,112,opt,name=postgres,proto3" json:"postgres,omitempty" kong:"cmd,help='PostgreSQL (CDC)'"`
	// @gotags: kong:"cmd,help='NATS'"
	Nats *args.NatsReadArgs `protobuf:"bytes,113,opt,name=nats,proto3" json:"nats,omitempty" kong:"cmd,help='NATS'"`
	// @gotags: kong:"cmd,help='NATS Streaming'"
	NatsStreaming *args.NatsStreamingReadArgs `protobuf:"bytes,114,opt,name=nats_streaming,json=natsStreaming,proto3" json:"nats_streaming,omitempty" kong:"cmd,help='NATS Streaming'"`
	// @gotags: kong:"cmd,help='NATS JetStream'"
	NatsJetstream        *args.NatsJetstreamReadArgs `protobuf:"bytes,115,opt,name=nats_jetstream,json=natsJetstream,proto3" json:"nats_jetstream,omitempty" kong:"cmd,help='NATS JetStream'"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *CreateRelayOptions) Reset()         { *m = CreateRelayOptions{} }
func (m *CreateRelayOptions) String() string { return proto.CompactTextString(m) }
func (*CreateRelayOptions) ProtoMessage()    {}
func (*CreateRelayOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_86dbec1f9d2837a2, []int{1}
}

func (m *CreateRelayOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateRelayOptions.Unmarshal(m, b)
}
func (m *CreateRelayOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateRelayOptions.Marshal(b, m, deterministic)
}
func (m *CreateRelayOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRelayOptions.Merge(m, src)
}
func (m *CreateRelayOptions) XXX_Size() int {
	return xxx_messageInfo_CreateRelayOptions.Size(m)
}
func (m *CreateRelayOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRelayOptions.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRelayOptions proto.InternalMessageInfo

func (m *CreateRelayOptions) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

func (m *CreateRelayOptions) GetCollectionToken() string {
	if m != nil {
		return m.CollectionToken
	}
	return ""
}

func (m *CreateRelayOptions) GetBatchSize() int32 {
	if m != nil {
		return m.BatchSize
	}
	return 0
}

func (m *CreateRelayOptions) GetBatchMaxRetry() int32 {
	if m != nil {
		return m.BatchMaxRetry
	}
	return 0
}

func (m *CreateRelayOptions) GetNumWorkers() int32 {
	if m != nil {
		return m.NumWorkers
	}
	return 0
}

func (m *CreateRelayOptions) GetKafka() *args.KafkaRelayArgs {
	if m != nil {
		return m.Kafka
	}
	return nil
}

func (m *CreateRelayOptions) GetAwsSqs() *args.AWSSQSRelayArgs {
	if m != nil {
		return m.AwsSqs
	}
	return nil
}

func (m *CreateRelayOptions) GetMongo() *args.MongoReadArgs {
	if m != nil {
		return m.Mongo
	}
	return nil
}

func (m *CreateRelayOptions) GetNsq() *args.NSQReadArgs {
	if m != nil {
		return m.Nsq
	}
	return nil
}

func (m *CreateRelayOptions) GetRabbit() *args.RabbitReadArgs {
	if m != nil {
		return m.Rabbit
	}
	return nil
}

func (m *CreateRelayOptions) GetMqtt() *args.MQTTReadArgs {
	if m != nil {
		return m.Mqtt
	}
	return nil
}

func (m *CreateRelayOptions) GetAzureServiceBus() *args.AzureServiceBusReadArgs {
	if m != nil {
		return m.AzureServiceBus
	}
	return nil
}

func (m *CreateRelayOptions) GetGcpPubsub() *args.GCPPubSubReadArgs {
	if m != nil {
		return m.GcpPubsub
	}
	return nil
}

func (m *CreateRelayOptions) GetKubemqQueue() *args.KubeMQQueueReadArgs {
	if m != nil {
		return m.KubemqQueue
	}
	return nil
}

func (m *CreateRelayOptions) GetRedisPubsub() *args.RedisPubSubReadArgs {
	if m != nil {
		return m.RedisPubsub
	}
	return nil
}

func (m *CreateRelayOptions) GetRedisStreams() *args.RedisStreamsReadArgs {
	if m != nil {
		return m.RedisStreams
	}
	return nil
}

func (m *CreateRelayOptions) GetPostgres() *args.PostgresReadArgs {
	if m != nil {
		return m.Postgres
	}
	return nil
}

func (m *CreateRelayOptions) GetNats() *args.NatsReadArgs {
	if m != nil {
		return m.Nats
	}
	return nil
}

func (m *CreateRelayOptions) GetNatsStreaming() *args.NatsStreamingReadArgs {
	if m != nil {
		return m.NatsStreaming
	}
	return nil
}

func (m *CreateRelayOptions) GetNatsJetstream() *args.NatsJetstreamReadArgs {
	if m != nil {
		return m.NatsJetstream
	}
	return nil
}

type DeleteRelayOptions struct {
	// @gotags: kong:"help='ID of the relay to delete',required=true"
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" kong:"help='ID of the relay to delete',required=true"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteRelayOptions) Reset()         { *m = DeleteRelayOptions{} }
func (m *DeleteRelayOptions) String() string { return proto.CompactTextString(m) }
func (*DeleteRelayOptions) ProtoMessage()    {}
func (*DeleteRelayOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_86dbec1f9d2837a2, []int{2}
}

func (m *DeleteRelayOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteRelayOptions.Unmarshal(m, b)
}
func (m *DeleteRelayOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteRelayOptions.Marshal(b, m, deterministic)
}
func (m *DeleteRelayOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRelayOptions.Merge(m, src)
}
func (m *DeleteRelayOptions) XXX_Size() int {
	return xxx_messageInfo_DeleteRelayOptions.Size(m)
}
func (m *DeleteRelayOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRelayOptions.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRelayOptions proto.InternalMessageInfo

func (m *DeleteRelayOptions) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type StopRelayOptions struct {
	// @gotags: kong:"help='ID of the relay to stop',required=true"
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" kong:"help='ID of the relay to stop',required=true"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StopRelayOptions) Reset()         { *m = StopRelayOptions{} }
func (m *StopRelayOptions) String() string { return proto.CompactTextString(m) }
func (*StopRelayOptions) ProtoMessage()    {}
func (*StopRelayOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_86dbec1f9d2837a2, []int{3}
}

func (m *StopRelayOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StopRelayOptions.Unmarshal(m, b)
}
func (m *StopRelayOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StopRelayOptions.Marshal(b, m, deterministic)
}
func (m *StopRelayOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopRelayOptions.Merge(m, src)
}
func (m *StopRelayOptions) XXX_Size() int {
	return xxx_messageInfo_StopRelayOptions.Size(m)
}
func (m *StopRelayOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_StopRelayOptions.DiscardUnknown(m)
}

var xxx_messageInfo_StopRelayOptions proto.InternalMessageInfo

func (m *StopRelayOptions) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ResumeRelayOptions struct {
	// @gotags: kong:"help='ID of the relay to resume',required=true"
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" kong:"help='ID of the relay to resume',required=true"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResumeRelayOptions) Reset()         { *m = ResumeRelayOptions{} }
func (m *ResumeRelayOptions) String() string { return proto.CompactTextString(m) }
func (*ResumeRelayOptions) ProtoMessage()    {}
func (*ResumeRelayOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_86dbec1f9d2837a2, []int{4}
}

func (m *ResumeRelayOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResumeRelayOptions.Unmarshal(m, b)
}
func (m *ResumeRelayOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResumeRelayOptions.Marshal(b, m, deterministic)
}
func (m *ResumeRelayOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResumeRelayOptions.Merge(m, src)
}
func (m *ResumeRelayOptions) XXX_Size() int {
	return xxx_messageInfo_ResumeRelayOptions.Size(m)
}
func (m *ResumeRelayOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ResumeRelayOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ResumeRelayOptions proto.InternalMessageInfo

func (m *ResumeRelayOptions) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*GetRelayOptions)(nil), "protos.opts.GetRelayOptions")
	proto.RegisterType((*CreateRelayOptions)(nil), "protos.opts.CreateRelayOptions")
	proto.RegisterType((*DeleteRelayOptions)(nil), "protos.opts.DeleteRelayOptions")
	proto.RegisterType((*StopRelayOptions)(nil), "protos.opts.StopRelayOptions")
	proto.RegisterType((*ResumeRelayOptions)(nil), "protos.opts.ResumeRelayOptions")
}

func init() { proto.RegisterFile("opts/ps_opts_manage_relay.proto", fileDescriptor_86dbec1f9d2837a2) }

var fileDescriptor_86dbec1f9d2837a2 = []byte{
	// 751 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x95, 0x5b, 0x4f, 0xe3, 0x46,
	0x1c, 0xc5, 0x15, 0x20, 0x14, 0x26, 0x84, 0xd0, 0x79, 0x68, 0x87, 0x50, 0x4a, 0x48, 0xa3, 0x8a,
	0x56, 0x22, 0x69, 0x8b, 0xfa, 0x80, 0x56, 0xfb, 0x00, 0xac, 0x16, 0xb1, 0x2b, 0xd8, 0xc4, 0x46,
	0x42, 0xda, 0x17, 0x6b, 0xec, 0xfc, 0x71, 0x4c, 0x62, 0x8f, 0x3d, 0x97, 0xe5, 0xf2, 0x55, 0xf7,
	0xcb, 0xac, 0x66, 0xec, 0x38, 0x0c, 0x09, 0x3c, 0x59, 0x39, 0xe7, 0x77, 0x8e, 0xc7, 0x73, 0x0b,
	0xda, 0x63, 0xa9, 0x14, 0xbd, 0x54, 0x78, 0xfa, 0xe9, 0xc5, 0x34, 0xa1, 0x21, 0x78, 0x1c, 0x26,
	0xf4, 0xb1, 0x9b, 0x72, 0x26, 0x19, 0xae, 0x99, 0x87, 0xe8, 0x6a, 0xbf, 0xd9, 0xa4, 0x3c, 0x34,
	0xb4, 0x7e, 0x7a, 0xf4, 0x5e, 0x78, 0x22, 0x13, 0x39, 0xd8, 0xec, 0xd8, 0xde, 0x93, 0xe2, 0xe0,
	0x09, 0xe0, 0xdf, 0xa2, 0x00, 0x3c, 0x5f, 0x4d, 0xa9, 0x5d, 0x8b, 0x0a, 0x83, 0xd4, 0x4b, 0x95,
	0x2f, 0x94, 0x5f, 0xd8, 0xc4, 0xb2, 0xc7, 0xf4, 0x76, 0x4c, 0x0b, 0x67, 0xcf, 0x76, 0x94, 0x0f,
	0x71, 0xe6, 0x65, 0x0a, 0x14, 0x2c, 0x8c, 0xc6, 0x2c, 0x09, 0x59, 0xe1, 0xfc, 0x6a, 0x3b, 0x99,
	0x94, 0x0b, 0x8d, 0x84, 0xca, 0xe9, 0x28, 0xf7, 0xe7, 0x0c, 0xef, 0x0e, 0xa4, 0x90, 0x1c, 0x68,
	0xfc, 0x3a, 0x92, 0xfb, 0x51, 0x12, 0x16, 0xc8, 0x2f, 0x36, 0x22, 0xb2, 0x42, 0xdf, 0xb1, 0xf4,
	0x94, 0x09, 0x19, 0x72, 0x98, 0xbe, 0x7a, 0xdb, 0x32, 0x39, 0xf5, 0xfd, 0x48, 0x2e, 0x9c, 0x02,
	0x0e, 0xc3, 0x48, 0xd8, 0xb3, 0xd7, 0x5a, 0x00, 0xe4, 0x83, 0x2a, 0xda, 0xdb, 0xfb, 0xa8, 0x71,
	0x0e, 0xd2, 0xd1, 0xeb, 0xfb, 0x25, 0x95, 0x11, 0x4b, 0x04, 0xde, 0x44, 0x4b, 0xd1, 0x90, 0x54,
	0x5a, 0x95, 0x83, 0x75, 0x67, 0x29, 0x1a, 0xb6, 0xbf, 0xaf, 0x21, 0x7c, 0xc6, 0x81, 0x4a, 0xb0,
	0xb0, 0x3f, 0x50, 0x3d, 0x60, 0x49, 0x02, 0x81, 0xfe, 0xe9, 0x95, 0x89, 0x8d, 0x99, 0x78, 0x31,
	0xc4, 0x7f, 0xa1, 0xad, 0x80, 0x4d, 0x26, 0x05, 0x24, 0xd9, 0x18, 0x12, 0xb2, 0x64, 0xb8, 0xc6,
	0x4c, 0xbf, 0xd6, 0x32, 0xde, 0x45, 0xc8, 0xa7, 0x32, 0x18, 0x79, 0x22, 0x7a, 0x02, 0xb2, 0xdc,
	0xaa, 0x1c, 0x54, 0x9d, 0x75, 0xa3, 0xb8, 0xd1, 0x13, 0xe0, 0x3f, 0x51, 0x23, 0xb7, 0x63, 0xfa,
	0xe0, 0x71, 0x90, 0xfc, 0x91, 0xac, 0x18, 0xa6, 0x6e, 0xe4, 0x4b, 0xfa, 0xe0, 0x68, 0x11, 0xef,
	0xa1, 0x5a, 0xa2, 0x62, 0xef, 0x9e, 0xf1, 0x31, 0x70, 0x41, 0xaa, 0x86, 0x41, 0x89, 0x8a, 0x6f,
	0x72, 0x05, 0xff, 0x8b, 0xaa, 0x66, 0x1b, 0x91, 0x61, 0xab, 0x72, 0x50, 0xfb, 0x6f, 0xa7, 0x5b,
	0xec, 0x67, 0x3d, 0x45, 0xdd, 0xcf, 0xda, 0x31, 0x9f, 0x79, 0xc2, 0x43, 0xe1, 0xe4, 0x24, 0xfe,
	0x1f, 0xfd, 0x54, 0x6c, 0x6d, 0x02, 0x26, 0xf4, 0x9b, 0x15, 0x3a, 0xb9, 0x71, 0xdd, 0x81, 0x3b,
	0x4b, 0xad, 0xd2, 0x7b, 0xe1, 0x66, 0x02, 0xff, 0x83, 0xaa, 0x66, 0xd7, 0x91, 0x5b, 0x13, 0x6a,
	0x5a, 0xa1, 0x4b, 0xed, 0x38, 0x40, 0x87, 0xf9, 0x8b, 0x0c, 0x88, 0xff, 0x46, 0xcb, 0x89, 0xc8,
	0x48, 0x68, 0x78, 0x62, 0xf1, 0x57, 0xee, 0xa0, 0xa4, 0x35, 0x84, 0x8f, 0xd0, 0x6a, 0xbe, 0x19,
	0xc8, 0x68, 0xc1, 0x87, 0x38, 0xc6, 0x2a, 0x13, 0x05, 0x8a, 0x0f, 0xd1, 0x8a, 0xde, 0xee, 0x24,
	0x32, 0x91, 0x6d, 0x7b, 0x44, 0x83, 0xeb, 0xeb, 0x32, 0x60, 0x30, 0xdc, 0x47, 0x3f, 0xcf, 0x9d,
	0x5b, 0x72, 0x67, 0xb2, 0x1d, 0x7b, 0x0a, 0x34, 0xe5, 0xe6, 0xd0, 0xa9, 0x12, 0x65, 0x4d, 0x83,
	0xda, 0x06, 0x7e, 0x8f, 0xd0, 0xec, 0x8c, 0x93, 0xb1, 0xa9, 0xfa, 0xdd, 0xaa, 0x3a, 0x3f, 0xeb,
	0xf7, 0x95, 0xef, 0x2a, 0xbf, 0x2c, 0x59, 0x0f, 0x83, 0xb4, 0x6f, 0x02, 0xf8, 0x0c, 0x6d, 0x3c,
	0x3f, 0xe9, 0x64, 0x62, 0x0a, 0x5a, 0xf6, 0x1a, 0x2a, 0x1f, 0x2e, 0x07, 0x03, 0xed, 0x97, 0x15,
	0xb5, 0x3c, 0x65, 0x44, 0x5d, 0xf2, 0xfc, 0xac, 0x90, 0x78, 0x41, 0x89, 0xa3, 0x81, 0x17, 0xe3,
	0xa8, 0xf1, 0x42, 0xd4, 0x23, 0xf9, 0x88, 0xea, 0xd6, 0x79, 0x22, 0xcc, 0xb4, 0xec, 0xcf, 0xb7,
	0xb8, 0x39, 0x50, 0xd6, 0xe4, 0x2f, 0x2f, 0x54, 0x7c, 0x8c, 0xd6, 0xa6, 0x07, 0x9e, 0xa4, 0xa6,
	0x62, 0xd7, 0xaa, 0xe8, 0x17, 0x66, 0x19, 0x2f, 0x71, 0xbd, 0x98, 0xfa, 0x9a, 0x21, 0xd9, 0x82,
	0xc5, 0xbc, 0xa2, 0x72, 0x16, 0x31, 0x18, 0xbe, 0x40, 0x9b, 0xf6, 0xad, 0x44, 0xb8, 0x09, 0xb6,
	0xe7, 0x82, 0xee, 0x94, 0x28, 0x1b, 0xea, 0xc9, 0x73, 0xb9, 0xac, 0x2a, 0xef, 0x40, 0x22, 0x5e,
	0xa9, 0xfa, 0x34, 0x25, 0xec, 0xaa, 0x52, 0x6e, 0x77, 0x10, 0xfe, 0x00, 0x13, 0x78, 0x71, 0xb9,
	0xbc, 0xbc, 0x83, 0xda, 0x68, 0xcb, 0x95, 0x2c, 0x7d, 0x93, 0xe9, 0x20, 0xec, 0x80, 0x50, 0xf1,
	0x9b, 0x4d, 0xa7, 0xef, 0xbe, 0x1e, 0x87, 0x91, 0x1c, 0x29, 0xbf, 0x1b, 0xb0, 0xb8, 0x67, 0xee,
	0x8e, 0x80, 0xf1, 0xb4, 0x97, 0x4e, 0x54, 0xec, 0x03, 0x3f, 0x14, 0xc1, 0x08, 0x62, 0x2a, 0x7a,
	0xbe, 0x8a, 0x26, 0xc3, 0x5e, 0xc8, 0x7a, 0xf9, 0x17, 0xf5, 0xf4, 0xdf, 0x9d, 0xbf, 0x6a, 0x7e,
	0x1c, 0xfd, 0x08, 0x00, 0x00, 0xff, 0xff, 0x66, 0xd0, 0x57, 0x09, 0x25, 0x07, 0x00, 0x00,
}
